data_dictionary
data_dictionary <- update_dictionary(c("pickup_datetime","dropoff_datetime"))
show_table(data_dictionary[,1:2])
data_dictionary <- update_dictionary(c("pickup_datetime","dropoff_datetime"))
data_dictionary[,1:2]
# Set the working directory for this work:
setwd("~/Readify/Projects/Grad_Academy/NYC_Taxis")
# ============================
# To prevent libraries displaying messy messages when loading, I'm going to re-define the function as an alias:
library <- function(...){
suppressPackageStartupMessages(base::library(...))
}
# ============================
# Create function for viewing tables simply in the notebook:
library(knitr)
library(kableExtra)
show_table <- function(my_table){
kable(my_table) %>%
column_spec(1, width = "10em") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
}
# ============================
# Update Dictionary
update_dictionary <- function(my_vars){
data_dictionary$Clean[which(data_dictionary$Variable_Name %in% my_vars)] <- 1
show_table(cbind(data_dictionary[1:7,1:2],data_dictionary[8:14,1:2],data_dictionary[15:21,1:2]))
return (data_dictionary)
}
data_dictionary <- update_dictionary(c("pickup_datetime","dropoff_datetime"))
data_dictionary <- update_dictionary(c("pickup_datetime","dropoff_datetime"))
data_dictionary <- update_dictionary(c("pickup_datetime","dropoff_datetime"))
data_dictionary <- update_dictionary(c("pickup_datetime","dropoff_datetime"))
data_dictionary <- update_dictionary(c("pickup_datetime","dropoff_datetime"))
# Set the working directory for this work:
setwd("~/Readify/Projects/Grad_Academy/NYC_Taxis")
# ============================
# To prevent libraries displaying messy messages when loading, I'm going to re-define the function as an alias:
library <- function(...){
suppressPackageStartupMessages(base::library(...))
}
# ============================
# Create function for viewing tables simply in the notebook:
library(knitr)
library(kableExtra)
show_table <- function(my_table){
kable(my_table) %>%
column_spec(1, width = "10em") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
}
# ============================
# Update Dictionary
update_dictionary <- function(my_vars){
data_dictionary$Clean[which(data_dictionary$Variable_Name %in% my_vars)] <- 1
return (data_dictionary)
}
# ============================
# Show Mini-Dictionary
function(data_dictionary){
show_table(cbind(data_dictionary[1:7,1:2],data_dictionary[8:14,1:2],data_dictionary[15:21,1:2]))
}
# Set the working directory for this work:
setwd("~/Readify/Projects/Grad_Academy/NYC_Taxis")
# ============================
# To prevent libraries displaying messy messages when loading, I'm going to re-define the function as an alias:
library <- function(...){
suppressPackageStartupMessages(base::library(...))
}
# ============================
# Create function for viewing tables simply in the notebook:
library(knitr)
library(kableExtra)
show_table <- function(my_table){
kable(my_table) %>%
column_spec(1, width = "10em") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
}
# ============================
# Update Dictionary
update_dictionary <- function(my_vars){
data_dictionary$Clean[which(data_dictionary$Variable_Name %in% my_vars)] <- 1
return (data_dictionary)
}
# ============================
# Show Mini-Dictionary
show_mini_dictionary <- function(data_dictionary){
show_table(cbind(data_dictionary[1:7,1:2],data_dictionary[8:14,1:2],data_dictionary[15:21,1:2]))
}
data_dictionary <- update_dictionary(c("pickup_datetime","dropoff_datetime"))
show_mini_dictionary(data_dictionary)
hist(nyc_taxi_data$passenger_count)
nyc_taxi_data %>% hist(passenger_count)
# Set the working directory for this work:
setwd("~/Readify/Projects/Grad_Academy/NYC_Taxis")
# ============================
# To prevent libraries displaying messy messages when loading, I'm going to re-define the function as an alias:
library <- function(...){
suppressPackageStartupMessages(base::library(...))
}
# ============================
# Load the libraries that we need:
library(knitr)
library(tidyverse)
library(kableExtra)
# Create function for viewing tables simply in the notebook:
show_table <- function(my_table){
kable(my_table) %>%
column_spec(1, width = "10em") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
}
# ============================
# Update Dictionary
update_dictionary <- function(my_vars){
data_dictionary$Clean[which(data_dictionary$Variable_Name %in% my_vars)] <- 1
return (data_dictionary)
}
# ============================
# Show Mini-Dictionary
show_mini_dictionary <- function(data_dictionary){
show_table(cbind(data_dictionary[1:7,1:2],data_dictionary[8:14,1:2],data_dictionary[15:21,1:2]))
}
nyc_taxi_data %>% hist(passenger_count)
library(dplyr)
nyc_taxi_data %>% hist(passenger_count)
library(dplyr)
nyc_taxi_data %>% hist(passenger_count)
library(dplyr)
nyc_taxi_data %>% hist(as.numeric(passenger_count))
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% hist()
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% hist()
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% head()
library(dplyr)
nyc_taxi_data %>% select(as.numeric(passenger_count)) %>% head()
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% as.numeric() %>% head()
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% as.numeric() %>% head()
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% as.numeric() %>% hist()
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% as.numeric() %>% hist()
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% hist()
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% hist()
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% hist(as.numeric(passenger_count))
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% hist(x = as.numeric(passenger_count))
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% hist(x = as.numeric(passenger_count))
library(dplyr)
nyc_taxi_data %>% select(x = passenger_count) %>% hist()
library(dplyr)
nyc_taxi_data %>% select(x = passenger_count) %>% hist(passenger_count)
?hist
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% as.numeric()
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% as.numeric(unlist())
library(dplyr)
nyc_taxi_data %>% select(passenger_count) %>% head()
library(dplyr)
nyc_taxi_data %>% select(passenger_count)*1
library(dplyr)
nyc_taxi_data %>% select(passenger_count)*1 %>% hist()
library(dplyr)
nyc_taxi_data %>% select(passenger_count)*1 %>% hist(.)
library(dplyr)
nyc_taxi_data %>% select(passenger_count*1) %>% hist()
library(dplyr)
nyc_taxi_data %>% select(passenger_count = passenger_count*1) %>% hist()
library(dplyr)
nyc_taxi_data %>% select(passenger_count = passenger_count*1) %>% hist()
library(dplyr)
nyc_taxi_data$passenger_count <- as.numeric(nyc_taxi_data$passenger_count)
nyc_taxi_data %>% select(passenger_count) %>% hist()
hist(nyc_taxi_data$passenger_count, main = "passenger_count")
hist(nyc_taxi_data$passenger_count, main = "Hist. of passenger_count")
data_dictionary <- update_dictionary(c("pickup_datetime","dropoff_datetime"))
show_mini_dictionary(data_dictionary)
data_dictionary <- update_dictionary("passenger_count")
show_mini_dictionary(data_dictionary)
data_dictionary <- update_dictionary("passenger_count")
show_mini_dictionary(data_dictionary)
hist(nyc_taxi_data$trip_time_in_secs)
nyc_taxi_data %>% ggplot(aes(x = trip_time_in_secs)) + geom_histogram() + scale_x_log10()
round(2.1)
round(2.5)
round(2.51)
knitr::opts_chunk$set(cache=T)
# Set the working directory for this work:
setwd("~/Readify/Projects/Grad_Academy/NYC_Taxis")
# ============================
# To prevent libraries displaying messy messages when loading, I'm going to re-define the function as an alias:
library <- function(...){
suppressPackageStartupMessages(base::library(...))
}
# ============================
# Load the libraries that we need:
library(knitr)
library(tidyverse)
library(kableExtra)
# Create function for viewing tables simply in the notebook:
show_table <- function(my_table){
kable(my_table) %>%
column_spec(1, width = "10em") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
}
# ============================
# Update Dictionary
update_dictionary <- function(my_vars){
data_dictionary$Clean[which(data_dictionary$Variable_Name %in% my_vars)] <- 1
return (data_dictionary)
}
# ============================
# Show Mini-Dictionary
show_mini_dictionary <- function(data_dictionary){
show_table(cbind(data_dictionary[1:7,1:2],data_dictionary[8:14,1:2],data_dictionary[15:21,1:2]))
}
# ============================
# Show double histogram:
double_hist <- function(my_x, my_name = "varname", my_breaks = 20){
x_norm_lin <- round(my_breaks*(my_x - min(my_x))/(max(my_x) - min(my_x)))
nyc_taxi_data %>% ggplot(aes(x = trip_time_in_secs)) + geom_histogram() + scale_x_log10()
}
library(dplyr)
library(data.table)
# # Option1:
# system.time({
# load("nyc_taxi_data.Rdata")
# })
# ## Takes 77 seconds to load!
#
# # Option2:
# system.time({
# nyc_taxi_data <- as_tibble(fread("nyc_taxi_data.csv"))
# })
# ## Takes 40 seconds to load!
# Going with option 2:
nyc_taxi_data <- as_tibble(fread("data/nyc_taxi_data.csv", verbose=F, showProgress=F))
# Fix some of the data types:
nyc_taxi_data$vendor_id <- as.factor(nyc_taxi_data$vendor_id)
nyc_taxi_data$rate_code <- as.factor(nyc_taxi_data$rate_code)
nyc_taxi_data$payment_type <- as.factor(nyc_taxi_data$payment_type)
nyc_taxi_data$store_and_fwd_flag <- as.factor(nyc_taxi_data$store_and_fwd_flag)
names(nyc_taxi_data)[19] <- "tips"
names(nyc_taxi_data)[20] <- "tolls"
dim(nyc_taxi_data)
show_table(head(nyc_taxi_data)) %>% scroll_box(width = "100%")
data_dictionary <- read.csv("data/data_dictionary.csv", stringsAsFactors = F)
show_table(data_dictionary)
summary(nyc_taxi_data)
class(nyc_taxi_data$pickup_datetime)
head(nyc_taxi_data$pickup_datetime)
nyc_taxi_data$dropoff_datetime[1] - nyc_taxi_data$pickup_datetime[1]
knitr::opts_chunk$set(cache=T)
# Set the working directory for this work:
setwd("~/Readify/Projects/Grad_Academy/NYC_Taxis")
# ============================
# To prevent libraries displaying messy messages when loading, I'm going to re-define the function as an alias:
library <- function(...){
suppressPackageStartupMessages(base::library(...))
}
# ============================
# Load the libraries that we need:
library(knitr)
library(tidyverse)
library(kableExtra)
# Create function for viewing tables simply in the notebook:
show_table <- function(my_table){
kable(my_table) %>%
column_spec(1, width = "10em") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
}
# ============================
# Update Dictionary
update_dictionary <- function(my_vars){
data_dictionary$Clean[which(data_dictionary$Variable_Name %in% my_vars)] <- 1
return (data_dictionary)
}
# ============================
# Show Mini-Dictionary
show_mini_dictionary <- function(data_dictionary){
show_table(cbind(data_dictionary[1:7,1:2],data_dictionary[8:14,1:2],data_dictionary[15:21,1:2]))
}
# ============================
# Show double histogram:
double_hist <- function(my_x, my_name = "varname", my_breaks = 20){
x_norm_lin <- round(my_breaks*(my_x - min(my_x))/(max(my_x) - min(my_x)))
nyc_taxi_data %>% ggplot(aes(x = trip_time_in_secs)) + geom_histogram() + scale_x_log10()
}
library(dplyr)
library(data.table)
# # Option1:
# system.time({
# load("nyc_taxi_data.Rdata")
# })
# ## Takes 77 seconds to load!
#
# # Option2:
# system.time({
# nyc_taxi_data <- as_tibble(fread("nyc_taxi_data.csv"))
# })
# ## Takes 40 seconds to load!
# Going with option 2:
nyc_taxi_data <- as_tibble(fread("data/nyc_taxi_data.csv", verbose=F, showProgress=F))
# Fix some of the data types:
nyc_taxi_data$vendor_id <- as.factor(nyc_taxi_data$vendor_id)
nyc_taxi_data$rate_code <- as.factor(nyc_taxi_data$rate_code)
nyc_taxi_data$payment_type <- as.factor(nyc_taxi_data$payment_type)
nyc_taxi_data$store_and_fwd_flag <- as.factor(nyc_taxi_data$store_and_fwd_flag)
names(nyc_taxi_data)[19] <- "tips"
names(nyc_taxi_data)[20] <- "tolls"
dim(nyc_taxi_data)
show_table(head(nyc_taxi_data)) %>% scroll_box(width = "100%")
data_dictionary <- read.csv("data/data_dictionary.csv", stringsAsFactors = F)
show_table(data_dictionary)
summary(nyc_taxi_data)
class(nyc_taxi_data$pickup_datetime)
head(nyc_taxi_data$pickup_datetime)
nyc_taxi_data$dropoff_datetime[1] - nyc_taxi_data$pickup_datetime[1]
knitr::opts_chunk$set(cache=T)
# Set the working directory for this work:
setwd("~/Readify/Projects/Grad_Academy/NYC_Taxis")
# ============================
# To prevent libraries displaying messy messages when loading, I'm going to re-define the function as an alias:
library <- function(...){
suppressPackageStartupMessages(base::library(...))
}
# ============================
# Load the libraries that we need:
library(knitr)
library(tidyverse)
library(kableExtra)
# Create function for viewing tables simply in the notebook:
show_table <- function(my_table){
kable(my_table) %>%
column_spec(1, width = "10em") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
}
# ============================
# Update Dictionary
update_dictionary <- function(my_vars){
data_dictionary$Clean[which(data_dictionary$Variable_Name %in% my_vars)] <- 1
return (data_dictionary)
}
# ============================
# Show Mini-Dictionary
show_mini_dictionary <- function(data_dictionary){
show_table(cbind(data_dictionary[1:7,1:2],data_dictionary[8:14,1:2],data_dictionary[15:21,1:2]))
}
# ============================
# Show double histogram:
double_hist <- function(my_x, my_name = "varname", my_breaks = 20){
x_norm_lin <- round(my_breaks*(my_x - min(my_x))/(max(my_x) - min(my_x)))
nyc_taxi_data %>% ggplot(aes(x = trip_time_in_secs)) + geom_histogram() + scale_x_log10()
}
library(dplyr)
library(data.table)
# # Option1:
# system.time({
# load("nyc_taxi_data.Rdata")
# })
# ## Takes 77 seconds to load!
#
# # Option2:
# system.time({
# nyc_taxi_data <- as_tibble(fread("nyc_taxi_data.csv"))
# })
# ## Takes 40 seconds to load!
# Fix some of the data types:
nyc_taxi_data$vendor_id <- as.factor(nyc_taxi_data$vendor_id)
nyc_taxi_data$rate_code <- as.factor(nyc_taxi_data$rate_code)
nyc_taxi_data$payment_type <- as.factor(nyc_taxi_data$payment_type)
nyc_taxi_data$store_and_fwd_flag <- as.factor(nyc_taxi_data$store_and_fwd_flag)
names(nyc_taxi_data)[19] <- "tips"
names(nyc_taxi_data)[20] <- "tolls"
knitr::opts_chunk$set(cache=T)
knitr::opts_chunk$set(cache=T)
dim(nyc_taxi_data)
show_table(head(nyc_taxi_data)) %>% scroll_box(width = "100%")
data_dictionary <- read.csv("data/data_dictionary.csv", stringsAsFactors = F)
show_table(data_dictionary)
summary(nyc_taxi_data)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: eruptions
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
# Chunk 3: tabsets
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: eruptions
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
# Chunk 3: tabsets
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
library(shiny)
shinyUI(fluidPage(
titlePanel(""),
h1("FDA Adverse (Drug) Event Dashboard"), hr(""),
includeMarkdown("welcome.Rmd"),
hr(),
tabsetPanel(
tabPanel("Reports",
br(),
sidebarPanel(
uiOutput("drugs"),
width = 5
),
mainPanel(
tabsetPanel(
tabPanel("By outcome",
h3("Reports by outcome"),
includeMarkdown("outcomes.Rmd"),
plotOutput("outcome_plot"),
h4("Share(s) of outcomes"),
dataTableOutput("outcome_shares"),
hr(),
h4("Total count of outcomes"),
dataTableOutput("outcomes")
),
tabPanel("By reaction",
h3("Count of reports by reaction"),
includeMarkdown("reactions.Rmd"),
dataTableOutput("reactions")
),
tabPanel("Per week",
h3("Count of reports per week"),
includeMarkdown("reports_by_week.Rmd"),
plotOutput("reports"),
checkboxInput("log_scale",
"Log y-axis (can clarify trends)",
value = TRUE),
hr(),
h4("Count of reports per week"),
p("Note: reverse sorted by week, recent weeks first"),
dataTableOutput("reports_by_week")
),
tabPanel("By age",
h3("Reports by age"),
includeMarkdown("age.Rmd"),
plotOutput("ages"),
h4("Ages (% by group)"),
dataTableOutput("age_shares"),
hr(),
h4("Total counts of adverse events by age"),
dataTableOutput("ages_counts")
)
),
fluidRow(
hr(),
div(id = "disqus_thread")
),
width = 8
)
),
tabPanel("About", br(),
includeMarkdown("about1.Rmd"),
textOutput("deaths"), br(),
includeMarkdown("about2.Rmd")
)
),
tags$head(
tags$script(src="disqus.js"),
tags$script("$(function() {$.fn.dataTableExt.errMode = 'none';});"),
tags$link(rel = "stylesheet",
type = "text/css",
href = "base.css")
)
))
knitr::opts_chunk$set(cache=T)
## ========================
## NYC TAXI DATA CHALLENGE
## ========================
setwd("/home/rstudio/nyc_taxi_data_challenge")
setwd("~/Vault/MyRepos/Docker/goodsy_nyc_taxis/nyc_taxi_data_challenge")
#COPY nyc_taxi_data_challenge /home/rstudio/nyc_taxi_data_challenge
